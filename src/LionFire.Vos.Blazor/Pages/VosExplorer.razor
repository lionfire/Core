@page "/v/{*path}"
@page "/v"
@namespace LionFire.Vos.Blazor

@using LionFire.Referencing
@using LionFire.Threading

@inject IServiceProvider ServiceProvider
@inject IVos rootManager
@inject NavigationManager navManager
@inject ILogger<VosExplorer> Logger

@using LionFire.Vos.Mounts
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using LionFire.Persistence
@using System.Reflection
@using LionFire.Resolves
@using MudBlazor

<div class="VosExplorer">

    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Size="@MudBlazor.Size.Medium" Style="@("opacity:" + (History.Count == 0 ? "0.2" : "1"))" @onclick=@Back></MudIconButton>

        <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Style="@("opacity:" + (ForwardHistory.Count == 0 ? "0.2" : "1"))" @onclick=@Forward></MudIconButton>


        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Style="@("opacity:" + (CanUp ? "1" : "0.2"))" @onclick=@(e => GoToPath(".."))></MudIconButton>

        <div class="AddressBar">@Path</div>

        <MudSpacer />

        <MudIconButton Icon="@Icons.Material.Filled.Refresh" @onclick=@Refresh></MudIconButton>
    </MudToolBar>


    @*<i class="fas fa-angle-double-down"></i>*@
    @if (listings == null)
    {
        <p><em>Loading... @Path</em></p>
    }
    else
    {
        <table class="table Listings dense">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Type</th>
                    @*<th>Dir</th>*@
                </tr>
            </thead>
            <tbody>
                @foreach (var listing in listings)
                {
                    <tr>
                        <td class="Icon">
                            <span @onclick="@(e => GoToPath(listing.Name))" class="@IconClasses(listing)" aria-hidden="true" data-glyph="battery-empty"></span>
                        </td>
                        <td class="Name" @onclick="@(e => ClickListing(e, listing))">@listing.Name</td>
                        <td>@(listing.DataType ?? listing.Type)</td>
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>

        @if (Vob != null)
        {
            @if (VobMounts != null)
            {
                <div class="panel">
                    <h5>VobMounts</h5>

                    <table>
                        <tr>
                            <th>Vob</th>
                            <td>@VobMounts.Vob.Path</td>
                        </tr>
                        <tr>
                            <th>Options</th>
                            <td>@VobMounts.Options</td>
                        </tr>
                        <tr>
                            <th>Read mounts</th>
                            <td>
                                @foreach (var mount in VobMounts?.ReadMounts ?? Enumerable.Empty<KeyValuePair<int, IMount>>())
                                {
                                    <div>@mount.Value</div>
                                }
                            </td>
                        </tr>

                        <tr>
                            <th>Write mounts</th>
                            <td>
                                @foreach (var mount in VobMounts.WriteMounts ?? Enumerable.Empty<KeyValuePair<int, IMount>>())
                                {
                                    <div>@mount.Value</div>
                                }
                            </td>
                        </tr>

                    </table>
                </div>
            }
        }

        @if (CurrentObject != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Property</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pi in CurrentObject.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(pi => pi.GetIndexParameters().Length == 0))
                    {
                        <tr>
                            <td>
                                @*<span @onclick="@(e => GoToPath(listing.Name))" class="@IconClasses(listing)" aria-hidden="true"></span>*@
                            </td>
                            <td>@pi.Name</td>
                            <td>@pi.GetValue(CurrentObject)</td>
                            @*<td></td>*@
                        </tr>
                    }
                </tbody>
            </table>
        }
    }

</div>
