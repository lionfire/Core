@using LionFire.Reactive.Persistence
@using Microsoft.Extensions.DependencyInjection

<div class="lf-field">
    @* <div class="label">Workspace</div> *@

    <div class="value">
        @if (Workspaces != null)
        {
            <MudSelect Label="Workspace" T="string" @bind-Value="CurrentWorkspace" Variant="Variant.Filled" Style="width: 100%">
                @foreach (var kvp in Workspaces.ObservableCache.KeyValues)
                {
                    <MudSelectItem Value="@kvp.Key">@kvp.Key</MudSelectItem>
                }
            </MudSelect>
        }
        else
        {
            <text>(Workspaces not available) @Workspace</text>
        }
    </div>

</div>

@code {

    [CascadingParameter]
    public IServiceProvider? UserServices { get; set; }

    [Parameter]
    public string Workspace { get; set; } = "one";

    IObservableReaderWriter<string, IWorkspace>? Workspaces;

    private string? CurrentWorkspace
    {
        get => currentWorkspace;
        set
        {
            currentWorkspace = value;
            // WorkspaceChanged.InvokeAsync(value);
        }
    }
    private string? currentWorkspace;

    public EventCallback<string?> CurrentWorkspaceChanged { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Workspaces = UserServices?.GetRequiredService<IObservableReaderWriter<string, IWorkspace>>();
        if (Workspaces.Keys.Count == 0)
        {
        }
    }

    protected override Task OnParametersSetAsync()
    {
        CurrentWorkspace = Workspace;
        return base.OnParametersSetAsync();
    }


    [Parameter]
    public EventCallback<string?> WorkspaceChanged { get; set; }


}
