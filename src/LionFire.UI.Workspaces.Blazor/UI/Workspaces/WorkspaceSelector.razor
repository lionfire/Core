@using LionFire.Reactive.Persistence
@using Microsoft.Extensions.DependencyInjection

<div class="lf-field" style="min-width: 20em;">
    @* <div class="label">Workspace</div> *@

    <div class="value">
        @if (Workspaces != null)
        {
            <MudSelect Label="Workspace" T="string" @bind-Value="CurrentWorkspace" Variant="Variant.Filled" Style="width: 100%">
                @foreach (var key in Workspaces.Keys.Keys)
                {
                    <MudSelectItem Value="@key">@key</MudSelectItem>
                }
            </MudSelect>
        }
        else
        {
            <text>(Workspaces not available) @Workspace</text>
        }
    </div>

</div>

@code {

    [CascadingParameter]
    public IServiceProvider? UserServices { get; set; }

    [Parameter]
    public string? Workspace { get; set; }

    IObservableReaderWriter<string, Workspace>? Workspaces;

    private string? CurrentWorkspace
    {
        get => currentWorkspace;
        set
        {
            if (currentWorkspace == value) return;
            currentWorkspace = value;
            WorkspaceChanged.InvokeAsync(currentWorkspace);
        }
    }
    private string? currentWorkspace;

    public EventCallback<string?> CurrentWorkspaceChanged { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Workspaces = UserServices?.GetRequiredService<IObservableReaderWriter<string, Workspace>>();
    }

    protected override async Task OnParametersSetAsync()
    {
        CurrentWorkspace = Workspace;
        if (CurrentWorkspace == null && Workspaces != null && Workspaces.Keys.Count != 0)
        {
            CurrentWorkspace = Workspaces.Keys.Keys.First();
            // if (CurrentWorkspaceChanged.HasDelegate)
            // {
            //     await CurrentWorkspaceChanged.InvokeAsync(CurrentWorkspace);
            // }
        }
        await base.OnParametersSetAsync();
    }


    [Parameter]
    public EventCallback<string?> WorkspaceChanged { get; set; }


}
