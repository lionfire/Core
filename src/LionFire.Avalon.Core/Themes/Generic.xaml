<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:black="clr-namespace:Blacklight.Controls;assembly=Blacklight.WPFControls"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    
    xmlns:lfaRemote="clr-namespace:LionFire.Avalon;assembly=LionFire.Avalon"
    xmlns:lfa="clr-namespace:LionFire.Avalon"
    xmlns:lfat="clr-namespace:LionFire.Avalon.Tree"
    xmlns:lfaL="clr-namespace:LionFire.Avalon">
    <ResourceDictionary.MergedDictionaries>
        <lfa:SharedResourceDictionary Source="pack://application:,,,/LionFire.Avalon;component/Resources/default-lfa.xaml"/>
        <!--<lfa:SharedResourceDictionary Source="pack://application:,,,/LionFire.Avalon;component/Resources/Fonts.xaml"/>-->
        <!--<ResourceDictionary Source="pack://application:,,,/LionFire.Avalon;component/Resources/LionListBox.xaml"/>-->
        <!--<lfa:SharedResourceDictionary Source="pack://application:,,,/LionFire.Avalon;component/Themes/ZapGeneric.xaml" />-->
        <!--<lfa:SharedResourceDictionary Source="pack://application:,,,/LionFire.Avalon;component/Themes/LionButtons.Generic.xaml" />-->
    </ResourceDictionary.MergedDictionaries>

    <!-- From Blacklight-->
    <!-- ClippingBorder style -->
    <Style TargetType="lfa:ClippingBorder">
        <Setter Property="ClipContent" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="lfa:ClippingBorder">
                    <Border Background="{TemplateBinding Background}" 
                            CornerRadius="{TemplateBinding CornerRadius}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                                x:Name="PART_Border"
                                >

                        <Grid>

                            <ContentControl x:Name="PART_TopLeftContentControl"
                                            HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                                <ContentControl.Clip>
                                    <RectangleGeometry x:Name="PART_TopLeftClip" />
                                </ContentControl.Clip>

                                <ContentControl x:Name="PART_TopRightContentControl"  
                                            HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" >
                                    <ContentControl.Clip>
                                        <RectangleGeometry x:Name="PART_TopRightClip" />
                                    </ContentControl.Clip>

                                    <ContentControl x:Name="PART_BottomRightContentControl" 
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" >
                                        <ContentControl.Clip>
                                            <RectangleGeometry x:Name="PART_BottomRightClip" />
                                        </ContentControl.Clip>

                                        <ContentControl x:Name="PART_BottomLeftContentControl" 
                                                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" >
                                            <ContentControl.Clip>
                                                <RectangleGeometry x:Name="PART_BottomLeftClip" />
                                            </ContentControl.Clip>

                                            <!--<Border x:Name="PART_InnerShadow" BorderBrush="Black" BorderThickness="{TemplateBinding InnerShadowThickness}">
                                                <Border.Effect>
                                                    <DropShadowEffect ShadowDepth="0" BlurRadius="10"/>
                                                </Border.Effect>-->

                                            <ContentPresenter Margin="{TemplateBinding Padding}" />

                                            <!--</Border>-->

                                        </ContentControl>
                                    </ContentControl>
                                </ContentControl>
                            </ContentControl>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style TargetType="{x:Type lfa:MasterDetailDockPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type lfa:MasterDetailDockPanel}">
                    <DockPanel LastChildFill="True">
                        <ContentPresenter x:Name="MasterPresenter" DockPanel.Dock="{TemplateBinding Dock}"></ContentPresenter>
                        <ContentPresenter x:Name="DetailPresenter"></ContentPresenter>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type lfa:LionListBox}">

        <Setter Property="FontFamily" Value="{DynamicResource ListItemFont}"/>
        <Setter Property="FontSize" Value="{DynamicResource ListItemFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource ListItemForeground}"/>

        <Setter Property="HighlightTemplate" Value="{StaticResource DefaultHighlightTemplate}"/>
        
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="ItemsPanel" >
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <!--<Setter Property="ItemTemplate">
            <Setter.Value>

                <DataTemplate >
Padding="{DynamicResource LionListItemPadding}" Margin="{DynamicResource LionListItemMargin}"
                    <Border Name="Border"
                            
                                                
                                                SnapsToDevicePixels="true" 
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                Background="Transparent" >
                        <ContentPresenter x:Name="ItemContent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  />
                        <ContentControl x:Name="ItemContent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding}"
                                        Padding="{DynamicResource LionListItemPadding}" Margin="{DynamicResource LionListItemMargin}"
                                        />
                    </Border>

                    <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="true">
                                                <Setter TargetName="Border" Property="Background" Value="#30FFFFFF"/>
                                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>

                </DataTemplate>
            </Setter.Value>
        </Setter>-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type lfa:LionListBox}">
                    <ControlTemplate.Resources>

                        <Style TargetType="ListBoxItem">

                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ListBoxItem" >
                                        <Border Name="Border"
                                                SnapsToDevicePixels="true" 
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                Margin="{DynamicResource LionListItemMargin}"
                                                Padding="{DynamicResource LionListItemPadding}"
                                                Background="Transparent" >
                                            <ContentPresenter x:Name="ItemContent" HorizontalAlignment="{DynamicResource ListItemHorizontalAlignment}" VerticalAlignment="Stretch"  />
                                            <!--<ContentControl x:Name="ItemContent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding}"/>-->
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <!--<Style TargetType="ListBoxItem">
                            <Style.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                            </Style.Resources>
                        </Style>-->

                    </ControlTemplate.Resources>

                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <!--<Grid HorizontalAlignment="Center" VerticalAlignment="Center">-->
                        <!--<ScrollViewer  Margin="0" Focusable="false">-->

                        <!--<ContentControl Template="{TemplateBinding ItemsPanel}"/>-->
                        <!--x:Name="ItemsPresenter"-->
                        <ItemsPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        <!--</ScrollViewer>-->
                        <!--</Grid>-->


                        <!-- OLD: -->
                        <!--<Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <ItemsPresenter x:Name="ItemsPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                            </ItemsPresenter>
                        </Grid>-->

                        <Canvas x:Name="Canvas">
                            <ContentControl x:Name="HighlightControl"  Opacity="0"
                                         Canvas.Top="0" Canvas.Left="0" Height="0" Width="0" Template="{TemplateBinding HighlightTemplate}">
                            </ContentControl>
                            <ContentControl x:Name="HoverControl"  Opacity="1" 
                                         Canvas.Top="0" Canvas.Left="0" Height="0" Width="0" Template="{TemplateBinding HoverTemplate}">
                            </ContentControl>
                            <!--Visibility="Hidden"-->
                        </Canvas>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="{Binding Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type lfa:LionListBox}}}"
                               Background="Transparent"
                               />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>

                    </DataTemplate.Resources>
                    <ContentPresenter>
                        <ContentPresenter.Resources>
                            <Style TargetType="TextBlock">
                                <Setter Property="FontFamily" Value="{DynamicResource ListItemFont}"/>
                                <Setter Property="FontSize" Value="25"/>
                            </Style>
                        </ContentPresenter.Resources>
                    </ContentPresenter>
                </DataTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>


    <!--<Style TargetType="{x:Type local:LionSelector}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LionSelector}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->


    <!-- EditableTextBlock -->
    <DataTemplate x:Key="DefaultEditModeTemplate">
        <TextBox 
                     Text="{Binding ElementName=mainControl, Path=Text, UpdateSourceTrigger=PropertyChanged}"
                     Margin="0" BorderThickness="1" />
    </DataTemplate>

    <DataTemplate x:Key="DefaultDisplayModeTemplate">
        <TextBlock Background="Green" Text="{Binding ElementName=mainControl, Path=FormattedText}" Margin="5,3,5,3" />
    </DataTemplate>

    <Style TargetType="lfa:EditableTextBlock">
        <Style.Triggers>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="ContentTemplate" Value="{Binding EditModeTemplate, ElementName=mainControl}"  />
                <Setter Property="ContentTemplate" Value="{StaticResource DefaultEditModeTemplate}"  />
            </Trigger>
            <Trigger Property="IsInEditMode" Value="False">
                <Setter Property="ContentTemplate" Value="{Binding DisplayModeTemplate, ElementName=mainControl}" />
                <Setter Property="ContentTemplate" Value="{StaticResource DefaultDisplayModeTemplate}"  />
            </Trigger>
        </Style.Triggers>
    </Style>



    <!-- ======================== Zap ======================== -->
    <Style TargetType="{x:Type lfaL:LionButton}"  x:Key="pageButtonStyle">
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Background" Value="#00FFFFFF" />
    </Style>

    <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}" x:Key="pageRepeatButtonStyle">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Interval" Value="200" />
    </Style>

    <DataTemplate DataType="{x:Type lfaL:ZapCommandItem}" x:Key="DefaultZapCommandItemTemplate">
        <lfaL:LionButton Command="{Binding}" Style="{StaticResource pageButtonStyle}" Content="{Binding Path=Caption}"/>
    </DataTemplate>

    <!--Original:-->
    <!--<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" x:Key="pageButtonStyle">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}" x:Key="pageRepeatButtonStyle">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Interval" Value="500" />
    </Style>

    <DataTemplate DataType="{x:Type lib:ZapCommandItem}" x:Key="DefaultZapCommandItemTemplate">
        <Button Command="{Binding}" Style="{StaticResource pageButtonStyle}" Content="{Binding Path=Number}"/>
    </DataTemplate>
    
    <Style TargetType="{x:Type ItemsControl}" x:Key="ZapScrollerCommandItemsControlStyle">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <StackPanel Orientation="Horizontal" IsItemsHost="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" HorizontalAlignment="Center" >
                            
                            <Button Content="&lt;&lt;" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FirstCommand}"
                      Style="{StaticResource pageButtonStyle}"/>
                            
                            <RepeatButton Content="&lt;" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PreviousCommand}"
                            Style="{StaticResource pageRepeatButtonStyle}"/>
                            
                            <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Commands}"
                            Style="{StaticResource ZapScrollerCommandItemsControlStyle}"
                            ItemTemplate="{TemplateBinding CommandItemTemplate}"/>
                            
                            <RepeatButton Content="&gt;" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NextCommand}"
                            Style="{StaticResource pageRepeatButtonStyle}"/>
                            
                            <Button Content="&gt;&gt;" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LastCommand}"
                      Style="{StaticResource pageButtonStyle}"/>
                        </StackPanel>
    
        -->

    <Style TargetType="{x:Type lfaL:ZapScroller}">
        <!--<Setter Property="CommandItemTemplate" Value="{StaticResource DefaultZapCommandItemTemplate}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type lfaL:ZapScroller}">
                    <!--<DockPanel  LastChildFill="True">-->

                    <!--<lfaL:LionListBox DockPanel.Dock="{TemplateBinding SelectorDock}" Orientation="Horizontal"
                                       ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Commands}"  DisplayMemberPath="Content.Caption"/>-->

                    <lfaL:ZapDecorator x:Name="PART_ZapDecorator">
                        <lfaL:ZapPanel IsItemsHost="true" 
                                          Orientation="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type lfa:ZapScroller}}, Path=Orientation}"
                                          />
                    </lfaL:ZapDecorator>

                    <!--</DockPanel>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <lfaL:OrientationInverter x:Key="OrientationInverter"/>

    <Style TargetType="{x:Type lfaL:ZapTabControl}">
        <Setter Property="CommandItemTemplate" Value="{StaticResource DefaultZapCommandItemTemplate}"/>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type lfaL:ZapTabControl}">
                    <DockPanel  LastChildFill="True">

                        <!--<TextBlock MinWidth="30" MinHeight="30" Background="LightGreen" Foreground="Black" Text="Asdf" DockPanel.Dock="Top"/>-->

                            <!--DisplayMemberPath="Content.Caption"-->
                            
                            <lfaL:LionListBox x:Name="llb" DockPanel.Dock="{TemplateBinding HeaderDock}" Orientation="{TemplateBinding Orientation}"
                                         ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Commands}"  
                                      SelectedIndex="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentItemIndex}"        
                                          ItemTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandItemTemplate}"
                                          DisplayMemberPath="Content"
MinWidth="50" MinHeight="50"
                                              Style="{TemplateBinding ListBoxStyle}"
                                          />

                        <lfaL:ZapDecorator x:Name="PART_ZapDecorator">
                            <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Items}" ItemTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemTemplate}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <lfaL:ZapPanel IsItemsHost="true"  
                                           MinWidth="50" MinHeight="50" 
                                          Orientation="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type lfa:ZapTabControl}}, Path=Orientation}"/>
                                        <!--, Converter={StaticResource OrientationInverter}-->
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                        </lfaL:ZapDecorator>

                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=== TreeListView ===-->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="#00FFFFFF" Width="19" Height="13">
                        <Border BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" BorderBrush="#FF7898B5" Width="9" Height="9" SnapsToDevicePixels="True">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="#FFFFFFFF" Offset="0.2" />
                                        <GradientStop Color="#FFC0B7A6" Offset="1" />
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path Data="M0,2L0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2z" Fill="#FF000000" Name="ExpandPath" Margin="1,1,1,1" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Path.Data" TargetName="ExpandPath">
                                <Setter.Value>
                                    <StreamGeometry>M0,2L0,3 5,3 5,2z</StreamGeometry>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <lfat:LevelToIndentConverter x:Key="LevelToIndentConverter"/>
    <lfat:CanExpandConverter x:Key="CanExpandConverter"/>

    <Style TargetType="{x:Type lfat:RowExpander}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type lfat:RowExpander}">
                    <ToggleButton x:Name="Expander" 
									  Style="{StaticResource ExpandCollapseToggleStyle}" 
									  Margin="{Binding Node.Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type lfat:TreeListItem}}}"
									  IsChecked="{Binding Node.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type lfat:TreeListItem}}}"
									  Visibility="{Binding Node.IsExpandable, Converter={StaticResource CanExpandConverter}, RelativeSource={RelativeSource AncestorType={x:Type lfat:TreeListItem}}}"
									  ClickMode="Press"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
