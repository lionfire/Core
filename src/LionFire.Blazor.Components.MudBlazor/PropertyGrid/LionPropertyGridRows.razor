@inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<PropertyGridRowsVM>

@using LionFire.Data.Async.Gets;
@using LionFire.Inspection;
@using LionFire.UI.Components.PropertyGrid;

@if (ViewModel.MemberVMs?.Any() == true)
{
    @foreach (var member in ViewModel.VisibleMembers)
    {
        <LionPropertyGridRow MemberVM="@member" Depth="@Depth" />
    }
}
else
{
    <div>(no children)</div>
}

@code {
    [CascadingParameter(Name = "PropertyGridVM")]
    public PropertyGridVM PropertyGridVM { get; set; }

    [Parameter]
    public int Depth { get; set; }

    [Parameter]
    public IEnumerable<IInspectorNode> MemberVMs { get; set; }

    [Parameter]
    public IObservableCache<IInspectorNode, string> ObservableMembersDictionary { get; set; }

    [Parameter]
    public IObservableList<IInspectorNode> ObservableMembers { get; set; }


    // [Parameter]
    // public IGetterRxO<IEnumerable<IInspectorMemberVM>> MembersGetter { get; set; }

    // public IGetterRxO<IEnumerable<object>> ObjectsGetter { get; set; }



    protected override void OnParametersSet()
    {
        ViewModel.PropertyGridVM = PropertyGridVM;
        ViewModel.MemberVMs = MemberVMs;
        // ViewModel.MembersGetter  = MembersGetter;


        // if (MembersGetter != null)
        // {
        //     this.Bind()
        // }
        base.OnParametersSet();
    }
}
