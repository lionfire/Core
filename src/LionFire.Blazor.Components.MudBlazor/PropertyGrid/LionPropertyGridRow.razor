@inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<PropertyGridRowVM>

@using LionFire.Mvvm.ObjectInspection;
@using LionFire.Reflection;
@using LionFire.UI.Components.PropertyGrid;
@using ReactiveUI;

@if (ViewModel.PropertyGridVM.ReadRelevance.HasFlag(MemberVM.MemberInfoVM.ReadRelevance))
{
    <tr>
        @* <td class="dev">R relevant: @ViewModel.PropertyGridVM.ReadRelevance.HasFlag(MemberVM.MemberInfoVM.ReadRelevance)</td>
        <td class="dev">W relevant: @ViewModel.PropertyGridVM.WriteRelevance.HasFlag(MemberVM.MemberInfoVM.WriteRelevance)</td>
        <td class="dev">RR: @MemberVM.MemberInfoVM.ReadRelevance</td>
        <td class="dev">WR: @MemberVM.MemberInfoVM.WriteRelevance</td> *@

        <td>
            @if (ViewModel.HasChildren)
            {
                <MudCheckBox T="bool" CheckedChanged="@ExpandedChanged" Dense=true Size="@Size.Small" />
            }
        </td>

        <td>
            <div style="@($"margin-left: {Depth*10}px")">
                @MemberVM.MemberInfoVM.Name
            </div>
        </td>
        <td class="@("Value " + ViewModel.ValueClass)">
            <PropertyEditor ViewModel="@ViewModel"  />
        </td>

        <td class="dev">@MemberVM.MemberKind.ToString().Substring(0, 1)</td>
        <td class="dev">@MemberVM.GetType().Name.Substring(0, 1)</td>
        <td class="dev">@MemberVM.MemberInfoVM.TypeFlags</td>
        <td class="dev Namespace">@MemberVM.MemberInfoVM.Type.Namespace</td>
        <td class="dev">@TypeNameUtils.DisplayTypeName(MemberVM.MemberInfoVM.Type)</td>
        <td class="dev">
            @if (ShowValueType)
            {
                <span title="@ViewModel.ValueType">
                    @ViewModel.ValueType.Name
                </span>
            }
        </td>
        @* <td>@(ChildMemberVMs?.Any() == true ? ChildMemberVMs.Select(v => v.MemberInfoVM.Name).Aggregate((x, y) => $"{x}, {y}") : "")</td> *@
        @* <td>@ViewModel.IsExpanded</td> *@
        <td class="dev">@(
        MemberVM.MemberInfoVM.CanRead ? "R" : ""
        )@(
               MemberVM.MemberInfoVM.CanWrite ? "W" : ""
               )</td>
        <td class="dev">@Depth</td>
    </tr>

    @if (ViewModel.HasChildren && Depth < ViewModel.PropertyGridVM.MaxDepth)
    {
        @childrenContent
    }
}

@* <MudExpansionPanels>
    <MudExpansionPanel Text="Members" IsExpandedChanged="@ExpandedChanged">
        @bind-IsExpanded="ViewModel.IsExpanded"
        @childrenContent
        <div>test1</div>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Test">
        <div>test</div>
    </MudExpansionPanel>
</MudExpansionPanels> *@

@code {

    #region Parameters

    [CascadingParameter(Name = "PropertyGridVM")]
    public PropertyGridVM PropertyGridVM { get; set; }// { set => ViewModel.PropertyGridVM = value; }

    [Parameter]
    public int Depth { get; set; }

    [Parameter]
    public MemberVM MemberVM { get; set; }// { get => ViewModel.MemberVM; set => ViewModel.MemberVM = value; }

    #endregion

    #region Lifecycle

    protected override Task OnParametersSetAsync()
    {
        ViewModel.MemberVM = MemberVM;
        ViewModel.PropertyGridVM = PropertyGridVM;

        return base.OnParametersSetAsync();
    }

    public bool ShowValueType => ViewModel.ValueTypeDiffersFromMemberType;

    protected override Task OnInitializedAsync()
    {
        Debug.WriteLine($"Depth: {Depth}.  Target: {MemberVM.Target?.GetType().Name}");

        ViewModel.Refresh();

        if (Depth == 0) ViewModel.IsExpanded = true;
        UpdateChildContent(); // ENH - bind IsExpanded to UpdateChildContent

        if (MemberVM is IDataMemberVM dataMemberVM && dataMemberVM.CanGetValue)
        {
            if (ViewModel.CanExpand(dataMemberVM.DataType))
            {
                try
                {
                    ViewModel.ChildMemberVMs = MemberVM.GetFor(dataMemberVM.GetValue());
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex);
                }
            }
        }

        ChildGenerator = __builder =>
        {
            <LionPropertyGridRows MemberVMs="@ViewModel.ChildMemberVMs" Depth="@(Depth + 1)" />
        };

        return base.OnInitializedAsync();
    }

    #endregion

    #region Children

    private RenderFragment ChildGenerator;
    private RenderFragment childrenContent;

    public Task ExpandedChanged(bool newVal)
    {
        ViewModel.IsExpanded = newVal;
        UpdateChildContent();
        return Task.CompletedTask;
    }

    #region (private)

    private void UpdateChildContent()
    {
        childrenContent = ViewModel.IsExpanded ? ChildGenerator : null;
    }

    #endregion
 
    #endregion
}
