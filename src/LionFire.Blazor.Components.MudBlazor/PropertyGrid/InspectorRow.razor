@inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<InspectorRowVM>

@using LionFire.Inspection;
@using LionFire.Reflection;
@using LionFire.UI.Components.PropertyGrid;
@using LionFire.Inspection.ViewModels;
@using ReactiveUI;

@* <tr class="dev">
    <td></td>
    <td>
        @ViewModel.NodeVM.Node.Source
    </td>
</tr> *@
@if (false && !ViewModel!.HasAnythingToShow)
{
    <tr>
        <td></td>
        <td>
            <span>(nothing to show: @ViewModel.NodeVM.Node?.ToString())</span>
        </td>
    </tr>
}
else
{
    @if (ViewModel.NodeVM == null)
    {
        <tr>
            <td></td>
            <td>(No node)</td>
        </tr>
    }
    else if (ViewModel.InspectorVM == null)
    {
        <tr>
            <td></td>
            <td>(No inspector)</td>
        </tr>
    }
    else
    {
        <tr class="@(GetRowClasses(ViewModel.NodeVM))">
            @* <td class="dev">R relevant: @ViewModel.InspectorVM.ReadRelevance.HasFlag(MemberVM.MemberInfoVM.ReadRelevance)</td>
    <td class="dev">W relevant: @ViewModel.InspectorVM.WriteRelevance.HasFlag(MemberVM.MemberInfoVM.WriteRelevance)</td>
    <td class="dev">RR: @MemberVM.MemberInfoVM.ReadRelevance</td>
    <td class="dev">WR: @MemberVM.MemberInfoVM.WriteRelevance</td> *@

            <td class="Expander">
                @if (true || ViewModel.NodeVM.HasOrMightHaveChildren)
                {
                    <MudCheckBox @bind-Checked="@ViewModel.NodeVM.ShowChildren"
                                 Dense=true
                                 Size="@Size.Medium"
                                 Color="Color.Secondary"
                                 CheckedIcon="@(ViewModel.NodeVM.HasOrMightHaveChildren == true ? Icons.Material.Filled.ArrowDownward : Icons.Material.Outlined.ArrowDownward)"
                                 UncheckedIcon="@(ViewModel.NodeVM.HasOrMightHaveChildren == true ? Icons.Material.Filled.ArrowRightAlt : Icons.Material.Outlined.ArrowRightAlt)"
                                 title="@($"{ViewModel!.NodeVM.ChildrenVM?.ViewableChildren.Count} of {ViewModel!.NodeVM.ChildrenVM?.Children.Count}")">
                    </MudCheckBox>
                }
            </td>

            <td class="Name">
                <div style="@($"margin-left: {NodeVM!.IndentLevel * 10}px")">
                    @ViewModel.NodeVM.Node.Info.Name
                </div>
            </td>

            <td class="@("Value " + ViewModel.ValueClass)">
                <DataMemberEditor NodeVM="@ViewModel.NodeVM" />
            </td>

            @if (NodeVM.Options.DiagnosticsMode)
            {
                <td class="FieldType">
                    <span title="@ViewModel!.NodeVM!.Node.Info.Type.FullName">
                        @ViewModel!.NodeVM!.Node.Info.Type?.ToHumanReadableName()
                    </span>
                </td>

                <td class="ValueType">

                    @if (ViewModel!.NodeVM!.ValueTypeDiffersFromMemberType)
                    {
                        <span title="@ViewModel.NodeVM!.CurrentValueType">
                            @ViewModel!.NodeVM!.CurrentValueType.ToHumanReadableName()
                        </span>
                    }
                </td>

                <td class="dev" title="@NodeVM.Node.Info.NodeKind.ToString()">@NodeVM.Node.Info.NodeKind.ToString().Substring(0, 4)</td>
                <td class="dev" title="@NodeVM.Node.GetType().Name">@NodeVM.Node.GetType().Name.Substring(0, 6)</td>
                <td class="dev">@NodeVM.Node.Info.TypeFlags.AggregateOrDefault((x,y)=>$"{x}, {y}")</td>

                @* <td>@(ChildMemberVMs?.Any() == true ? ChildMemberVMs.Select(v => v.MemberInfoVM.Name).Aggregate((x, y) => $"{x}, {y}") : "")</td> *@
                @* <td>@ViewModel.IsExpanded</td> *@
                <td class="dev">@NodeVM.Node.Info?.GetRWCodes()</td>
                <td class="dev" title="Depth">@NodeVM.Depth</td>
                <td class="dev" title="Path">@NodeVM.Node.Path</td>
                <td class="dev" title="Child count">@ViewModel!.NodeVM.ChildrenVM?.Children.Count</td>
                <td class="dev" title="Viewable child count">@ViewModel!.NodeVM.ChildrenVM?.ViewableChildren.Count</td>
                <td class="dev" title="Source Type">@ViewModel!.NodeVM.Node.Source?.GetType().Name</td>
                <td class="dev" title="Value Type">@ViewModel!.NodeVM.Node.Value?.GetType().Name</td>
                @* <td class="dev" title="Key">@(ViewModel!.NodeVM.Node?.Key ?? "(null)")</td> *@
            }
        </tr>

        @if (ViewModel.NodeVM.ShowChildren)
        {
            @* @if (ViewModel.NodeVM.AreChildrenVisible && ViewModel!.NodeVM!.HasOrMightHaveChildren)
        {
            @CurrentChildGenerator
        } *@
            @if (ViewModel!.NodeVM?.ChildrenVM?.ViewableChildren != null
                                        && ViewModel!.NodeVM!.HasOrMightHaveChildren
                                        && ViewModel!.NodeVM.ChildrenVM.ViewableChildren.Count > 0 == true
                                        && ViewModel.NodeVM.Depth < ViewModel.NodeVM.Options.MaxDepth
                                    )
            {
                @foreach (var nodeVM in ViewModel!.NodeVM.ChildrenVM.ViewableChildren)
                {
                    <InspectorRow NodeVM="@nodeVM" />
                }
            }
            else if(!NodeVM.IsFlattened)
            {
                <tr>
                    <td></td>
                    <td>
                        <div>(no children)</div>
                    </td>
                </tr>
            }
        }
    }
}


@* <MudExpansionPanels>
    <MudExpansionPanel Text="Members" >
        @bind-IsExpanded="ViewModel.IsExpanded"
        @childrenContent
        <div>test1</div>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Test">
        <div>test</div>
    </MudExpansionPanel>
</MudExpansionPanels> *@

@* @code {

    // void SetChildGenerator()
    // {
    //     ChildGenerator = __builder =>
    //     {
    //         <InspectorRows NodeVM="@ViewModel!.NodeVM" />
    //         @if (ViewModel!.ViewableChildren.Count > 0 == true)
    //         {
    //             @foreach (var nodeVM in ViewModel!.NodeVM.ChildrenVM.ViewableChildren)
    //             {
    //                 <InspectorRow NodeVM="@nodeVM" />
    //             }

    //         }
    //         else
    //         {
    //             <div>(no children)</div>
    //         }
    //     };
    // }
} *@