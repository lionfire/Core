@inject MudBlazorViewTypeProvider ViewTypeProvider

@using LionFire.Inspection.ViewModels;

@implements IEditorParameters


@* <span class="dev">
    @(ViewModel.CanEdit ? "" : "(Cannot edit)")
</span>
<span class="dev">
    @(ViewModel.ReadOnly ? "(ReadOnly)" : "")
</span> *@

@if (!NodeVM.CanWrite)
{
    @NodeVM.DisplayValue
}
else if (NodeVM.Getter != null)
{
    if (NodeVM.Node.Info.Type == typeof(bool))
    {
        <MudSwitch @bind-Checked="NodeVM.Getter.ReadCacheValue" />
    }
    else if (NodeVM.Node.Info.Type == typeof(string))
    {
        <MudTextField T=Object @bind-Value="NodeVM.Value"  />
    }
    else if (NodeVM.Node.Info.Type == typeof(int))
    {
        <MudNumericField @bind-Value="NodeVM.Getter.ReadCacheValue" />
    }
    else
    {
        <DynamicComponent Type="@EditorType" Parameters="@Parameters" ></DynamicComponent>
        @* @ViewModel.DisplayValue *@
    }
}

@code {

    [Parameter]
    public NodeVM NodeVM { get; set; }


    public Type? EditorType => ViewTypeProvider.GetViewType(NodeVM.Node.Info.Type) ?? FallbackEditorType;

    public Type FallbackEditorType => typeof(FallbackEditor);

    public string Value { get; set; } = "abc";


    public IDictionary<string, object?>? Parameters => ComponentParameters<IEditorParameters>.ToParameterDictionary(this);

    
}