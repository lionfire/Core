@inject MudBlazorViewTypeProvider ViewTypeProvider

@using LionFire.Inspection.ViewModels;
@using System.ComponentModel;

@implements IEditorParameters


@* <span class="dev">
    @(ViewModel.CanEdit ? "" : "(Cannot edit)")
</span>
<span class="dev">
    @(ViewModel.ReadOnly ? "(ReadOnly)" : "")
</span> *@

@if (!NodeVM.CanWrite)
{
    @* <div>
            test
    </div> *@
    <div class="ReadOnly Value">
        @NodeVM.Value
    </div>
}
else if (NodeVM.AsyncValue != null)
{
    <div>AsyncValue</div>
    if (NodeVM.Node.Info.Type == typeof(bool))
    {
        <MudSwitch @bind-Checked="NodeVM.AsyncValue.Value" />
    }
    else if (NodeVM.Node.Info.Type == typeof(string))
    {
        <MudTextField T=Object @bind-Value="NodeVM.AsyncValue.Value" />
    }
    else if (NodeVM.Node.Info.Type == typeof(int))
    {
        <MudNumericField @bind-Value="NodeVM.AsyncValue.Value" />
    }
    else
    {
        <DynamicComponent Type="@EditorType" Parameters="@Parameters"></DynamicComponent>
        @* @ViewModel.DisplayValue *@
    }
}
else if (NodeVM.Getter != null)
{
    <div>Getter</div>
    if (NodeVM.Node.Info.Type == typeof(bool))
    {
        <MudSwitch T="bool" @Checked="NodeVM.Getter.Value" />
    }
    else if (NodeVM.Node.Info.Type == typeof(string))
    {
        <MudTextField T=Object @Value="NodeVM.Value" />
    }
    else if (NodeVM.Node.Info.Type == typeof(int))
    {
        <MudNumericField T=int @Value="NodeVM.Getter.Value" />
    }
    else
    {
        <DynamicComponent Type="@EditorType" Parameters="@Parameters"></DynamicComponent>
        @* @ViewModel.DisplayValue *@
    }
}

@code {

    [Parameter]
    public NodeVM NodeVM { get; set; }


    public Type? EditorType => ViewTypeProvider.GetViewType(NodeVM.Node.Info.Type) ?? FallbackEditorType;

    public Type FallbackEditorType => typeof(FallbackEditor);

    // public string Value { get=> NodeVM.Value; set => NodeVM.Value = value; }


    public IDictionary<string, object?>? Parameters => ComponentParameters<IEditorParameters>.ToParameterDictionary(this);


    protected override async Task OnParametersSetAsync()
    {
        if (NodeVM.AsyncValue != null) { await NodeVM.AsyncValue.Get(); } // TEMP: await
        else if (NodeVM.Getter != null) { await NodeVM.Getter.Get(); } // TEMP: await

        base.OnParametersSetAsync();
        NodeVM.PropertyChanged += OnNodeVMPropertyChanged;
    }

    private void OnNodeVMPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged).FireAndForget();
    }
}