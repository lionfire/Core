@implements IEditorParameters

@inject MudBlazorViewTypeProvider ViewTypeProvider

@* <span class="dev">
    @(ViewModel.CanEdit ? "" : "(Cannot edit)")
</span>
<span class="dev">
    @(ViewModel.ReadOnly ? "(ReadOnly)" : "")
</span> *@

@if (ViewModel.ReadOnly || !ViewModel.CanEdit)
{
    @ViewModel.DisplayValue
}
else if (ViewModel.DataType != null)
{
    if (ViewModel.DataType == typeof(bool))
    {
        <MudSwitch @bind-Checked="ViewModel.DataMemberVM.Value.Value" />
    }
    else if (ViewModel.DataType == typeof(string))
    {
        <MudTextField T=Object @bind-Value="ViewModel.DataMemberVM.Value.Value" />
    }
    else if (ViewModel.DataType == typeof(int))
    {
        <MudNumericField @bind-Value="ViewModel.DataMemberVM.Value.Value" />
    }
    else
    {
        <DynamicComponent Type="@EditorType" Parameters="@Parameters" ></DynamicComponent>
        @* @ViewModel.DisplayValue *@
    }
}

@code {

    [Parameter]
    public PropertyVM? ViewModel { get; set; }


    public Type? EditorType => ViewTypeProvider.GetViewType(ViewModel.DataType) ?? FallbackEditorType;

    public Type FallbackEditorType => typeof(FallbackEditor);

    public string Value { get; set; } = "abc";


    public IDictionary<string, object?>? Parameters => ComponentParameters<IEditorParameters>.ToParameterDictionary(this);

    
}