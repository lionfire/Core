@using Microsoft.Extensions.DependencyInjection
@inject ILogger<LionCollection<TItem, TItemVM>> Logger
@inject LionFire.Structures.Keys.IKeyProviderService<string> KeyProviderService
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject IViewModelProvider ViewModelProvider

@namespace LionFire.Blazor.Components
@typeparam TItem
@typeparam TItemVM

@if (CreateableTypes != null && CreateableTypes.Any())
{
    <MudMenu Class="" Label="Add" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Dense AnchorOrigin="Origin.BottomLeft">
        @foreach (var t in CreateableTypes)
        {
            <MudMenuItem OnClick="@(() => OnCreate(t))">@DisplayNameForType(t)</MudMenuItem>
        }
    </MudMenu>
}

@if (RetrieveAction != null && ShowRefresh)
{
    <MudIconButton OnClick="Retrieve" Icon="@Icons.Material.Filled.Refresh" />
}

@if (ChildContent != null)
{
    <div>@ChildContent(View)</div>
}
else
{
    <MudDataGrid T="(TItem, TItemVM)"
             Items="@View" SortMode="SortMode.Multiple" Filterable="true" Hideable="true" RowClick="@RowClicked">

    </MudDataGrid>
}

@if (CreateableTypes != null && CreateableTypes.Any() && Create != null)
{
    <MudMenu Class="" Label="Add" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Dense AnchorOrigin="Origin.BottomLeft">
        @foreach (var t in CreateableTypes)
        {
            <MudMenuItem OnClick="@(() => OnCreate(t))">
                @DisplayNameForType(t)
            </MudMenuItem>
        }
    </MudMenu>
}
