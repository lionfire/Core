@using Microsoft.Extensions.DependencyInjection
@inject ILogger<ItemsEditor<TItem, TView>> Logger
@inject LionFire.Structures.Keys.IKeyProviderService<string> KeyProviderService
@inject NavigationManager NavigationManager

@namespace LionFire.Blazor.Components
@typeparam TItem
@typeparam TView

@if (RetrieveAction != null && ShowRefresh)
{
    <MudIconButton OnClick="Retrieve" Icon="@Icons.Filled.Refresh" />
}

<div>@ChildContent(View)</div>

@if (CreateableTypes != null && Create != null)
{
    <MudMenu Class="" Label="Add" Icon="@Icons.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Dense AnchorOrigin="Origin.BottomLeft">

        @if (CreateableTypes.IsCompletedSuccessfully)
        {
            @foreach (var t in CreateableTypes.Result)
            {
                <MudMenuItem OnClick="@(()=>Create(t))">
                    @t.Name
                    @*@t.Name.Replace("Matchmaker","").TrimLeadingIOnInterfaceType()*@
                </MudMenuItem>
            }
        }
    </MudMenu>
}
