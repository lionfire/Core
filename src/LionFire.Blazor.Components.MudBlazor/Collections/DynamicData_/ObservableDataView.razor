@inherits ReactiveInjectableComponentBase<ObservableDataVM<TKey,TValue,TValueVM>>
@typeparam TKey where TKey : notnull
@typeparam TValue where TValue : notnull
@typeparam TValueVM where TValueVM : notnull

@namespace LionFire.Blazor.Components

@inject ILogger<KeyedCollectionView<TKey, TValue, TValueVM>> Logger
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject IViewModelProvider ViewModelProvider

<MudToolBar Class="gap-1">

    @if (ViewModel!.CanCreate && ViewModel!.CreatableTypes.Any())
    {
        if (ViewModel is ICreatesAsyncVM<TValue> createsValue)
        {
            @if (ViewModel.CreatableTypes.Count() > 1)
            {
                <MudMenu Label="Add..." Class="Add" Icon="@Icons.Material.Outlined.Add" Variant="Variant.Outlined" Color="Color.Success"
                         Dense
                         AnchorOrigin="Origin.BottomLeft">
                    @foreach (var t in ViewModel!.CreatableTypes)
                    {
                        <MudMenuItem OnClick=@(() => createsValue.Create.Execute(t).Subscribe())>
                            @DisplayNameUtilsX.DisplayNameForType(t)
                        </MudMenuItem>
                    }
                </MudMenu>
            }
            else
            {
                <MudButton Label="Add" Class="Add"
                           OnClick=@(() => createsValue.Create.Execute(ViewModel.CreatableTypes.FirstOrDefault(typeof(TValue))).Subscribe())
                           Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" />
            }
        }
    }

    <MudToggleIconButton Icon="@Icons.Material.Outlined.Edit" ToggledIcon="@Icons.Material.Filled.ModeEdit" @bind-Toggled="IsEditing" ToggledVariant="@Variant.Filled" ToggledColor="@Color.Primary" />

    <MudToggleIconButton Icon="@Icons.Material.Outlined.DeleteForever" ToggledIcon="@Icons.Material.Filled.DeleteForever" @bind-Toggled="@ViewModel!.ShowDeleteColumn" ToggledVariant="@Variant.Filled" ToggledColor="@Color.Error" />

    @if (ViewModel != null && ViewModel.ShowRefresh)
    {
        @* TODO: Special color if !HasValue, indicating first resolve is needed *@
        @* <MudIconButton Disabled="!ViewModel.CanGet" OnClick="() => ViewModel.GetCommand.Execute()" Color="@Color.Tertiary" Icon="@Icons.Material.Filled.Refresh" /> *@
    }
</MudToolBar>


@if (ChildContent != null)
{
    <div>@ChildContent(ViewModel!)</div>
}
else if (ViewModel!.Items != null)
{
    @* <h3>ValueVMs @ViewModel.ValueVMs.Count</h3> *@
    @* @foreach (var item in ViewModel.ValueVMs.Items)
    {
        <div>
            <div>Item:</div>
            @item
        </div>
    } *@

    @* <CascadingT T="TValueVM"> *@
    @* Items="@ViewModel!.Items?.Items" *@
    <MudDataGrid @ref="MudDataGrid"
                 T="TValueVM"
                 EditMode="EditMode"
                 Hover
                 Items="@ViewModel!.Items.Items"
                 SortMode="SortMode.Multiple"
                 ShowFilterIcons=false
                 Filterable="true"
                 Hideable="true"
                 ReadOnly="@ReadOnly"
                 RowClick="@RowClicked"
                 RowContextMenuClick="@(OpenMenuContent!)"
                 ChildRowContent="@ChildRowContent">
        @* EditMode="@(_isCellEditMode? DataGridEditMode.Cell: DataGridEditMode.Form)" *@
        @* Columns="@(Columns ?? CreateColumns)" *@
        <Columns>
            @if (IsEditing)
            {
                if (EditingColumns != null)
                {
                    @AutoEditColumns
                }
                else if (Columns != null)
                {
                    @Columns
                }
                else
                {
                    @AutoColumns
                }
            }
            else
            {
                if (Columns != null)
                {
                    @Columns
                }
                else
                {
                    @AutoColumns
                }
            }
            @if (!ReadOnly && !IsEditing && ViewModel!.CanDelete && ViewModel!.ShowDeleteColumn)
            {
                <TemplateColumn Title="Delete">
                    <CellTemplate>
                        @* <MudStack Row> *@
                        <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Error" OnClick="@(() => ViewModel.Delete(context.Item))"></MudIconButton>
                        @* </MudStack> *@
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>
    </MudDataGrid>

    @if (ContextMenu != null)
    {
        <MudMenu PositionAtCursor="true" @ref="_contextMenu" id="_contextMenu">
            @* <MudMenuItem Icon="@Icons.Material.Filled.Block">
                Parent menu for: @_contextRow.
            </MudMenuItem> *@
            @if (_contextRow != null)
            {
                @ContextMenu(_contextRow)
            }
            @* <MudMenuItem Icon="@Icons.Material.Filled.Info" OnClick="@ShowHiddenInfo">
                View Details for @_contextRow?.HwId
            </MudMenuItem> *@
        </MudMenu>
    }
    @* </CascadingT> *@
}
@*else if(Items!=null) // No TValueVM, show TValue items directly
{
    <MudDataGrid T="TValue"
             Items="@Items" SortMode="SortMode.Multiple" Filterable="true" Hideable="true" RowClick="@RowClicked">

    </MudDataGrid>
}*@
else // No TValueVM, show TValue items directly
{
    <span>(No data)</span>
    @*<MudDataGrid T="TValue"
             Items="@Items" SortMode="SortMode.Multiple" Filterable="true" Hideable="true" RowClick="@RowClicked">
    </MudDataGrid>*@
}

