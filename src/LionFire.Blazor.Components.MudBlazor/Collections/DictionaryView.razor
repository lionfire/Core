@inherits ReactiveInjectableComponentBase<AsyncDictionaryVM<TKey,TValue,TValueVM>>
@inject ILogger<DictionaryView<TKey, TValue, TValueVM>> Logger
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject IViewModelProvider ViewModelProvider

@namespace LionFire.Blazor.Components
@typeparam TKey
@typeparam TValue
@typeparam TValueVM

@if (CreateableTypes != null && CreateableTypes.Any())
{
    if (ViewModel is ICreatesAsyncVM<TValue> createsValue) {
        <MudMenu Class="" Label="Add" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success"  
Dense
        AnchorOrigin="Origin.BottomLeft">
            @foreach (var t in CreateableTypes)
            {
                <MudMenuItem OnClick=@(() => createsValue.Create.Execute(t))>@DisplayNameUtilsX.DisplayNameForType(t)</MudMenuItem>
            }
        </MudMenu>
    }
}

@if (ViewModel != null && ViewModel.ShowRefresh || (ViewModel.ShowRefreshIfHasNoValue && !ViewModel.HasValue))
{
    @* TODO: Special color if !HasValue, indicating first resolve is needed *@
    <MudIconButton Disabled="!ViewModel.CanResolve" @OnClick="() => ViewModel.Resolve.Execute()" Color="@Color.Tertiary" Icon="@Icons.Material.Filled.Refresh" />
}

@if (ChildContent != null)
{
    <div>@ChildContent(ViewModel)</div>
}
else if (ViewModel.ObservableCache != null)
{
    <MudDataGrid T="(TValueVM)"
                 Items="@ViewModel.ObservableCache" SortMode="SortMode.Multiple" Filterable="true" Hideable="true" RowClick="@RowClicked">

    </MudDataGrid>
}
else // No TValueVM, show TValue items directly
{
    <MudDataGrid T="TValue"
             Items="@Values" SortMode="SortMode.Multiple" Filterable="true" Hideable="true" RowClick="@RowClicked">

    </MudDataGrid>
}

@if (CreateableTypes != null && CreateableTypes.Any() && ViewModel.Create != null)
{
    <MudMenu Class="" Label="Add" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Dense AnchorOrigin="Origin.BottomLeft">
    @foreach (var t in CreateableTypes)
        {
            <MudMenuItem @OnClick="@(() => ViewModel.Create.Execute(t))">
                @DisplayNameUtilsX.DisplayNameForType(t)
            </MudMenuItem>
        }
    </MudMenu>
}
