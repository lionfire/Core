// <auto-generated />
using System;
using LionFire.Life.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LionFire.Migrations
{
    [DbContext(typeof(TimeTrackingContext))]
    [Migration("20220404044919_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("LionFire.Life.Model.AccountingCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("JournalTagId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JournalTagId");

                    b.ToTable("AccountingCodes");
                });

            modelBuilder.Entity("LionFire.Life.Model.JournalEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("BilledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("LionFire.Life.Model.JournalTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountingCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("JournalEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Project")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("LionFire.Life.Model.AccountingCode", b =>
                {
                    b.HasOne("LionFire.Life.Model.JournalTag", null)
                        .WithMany("AccountingCodes")
                        .HasForeignKey("JournalTagId");
                });

            modelBuilder.Entity("LionFire.Life.Model.JournalTag", b =>
                {
                    b.HasOne("LionFire.Life.Model.JournalEntry", null)
                        .WithMany("Tags")
                        .HasForeignKey("JournalEntryId");
                });

            modelBuilder.Entity("LionFire.Life.Model.JournalEntry", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("LionFire.Life.Model.JournalTag", b =>
                {
                    b.Navigation("AccountingCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
